{"version":3,"sources":["components/card-component.tsx","constants.tsx","components/summary/summary-component.tsx","components/title-component.tsx","components/test-component.tsx","components/time-series-chart.tsx","components/compare-chart.tsx","components/boro-component.tsx","components/bar-chart-component.tsx","components/errro-boundary/error-boundary.tsx","components/nyc/nyc-component.tsx","components/header-component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","padding","borderWidth","CardComponent","props","classes","icon","upIcon","downIcon","Grid","item","xs","sm","Paper","elevation","className","Typography","variant","title","container","justify","number","style","paddingTop","color","rateColor","rate","rateText","Constants","casesColor","hospColor","deathsColor","pinkColor","greenColor","formatNum","value","num","parseInt","toString","numArray","push","Math","floor","reverse","join","Summary","summaryData","cases","increase","hospitalized","deaths","computeRate","total","toFixed","hRate","parseFloat","dRate","increaseNum","increaseResult","spacing","flexGrow","marginTop","marginBottom","date","marginRight","TitleComponent","name","Chip","size","label","datasource","component","href","link","clickable","fontSize","lastUpdated","EnhancedTableToolbar","cancelIcon","search","InputAdornment","position","IconButton","onClick","flex","textAlign","TextField","onChange","onSearchChange","id","placeholder","InputProps","startAdornment","endAdornment","ZCTest","testingData","useState","setSearch","page","setPage","React","rowsPerPage","setRowsPerPage","results","setResults","emptyRows","min","length","e","target","searchResults","filter","indexOf","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","slice","map","key","scope","height","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","chip_container","chart","TimeSeriesChart","dates","hosp","dailyData","forEach","option","text","subtext","tooltip","trigger","legend","data","left","grid","top","right","bottom","containLabel","xAxis","type","boundaryGap","yAxis","series","smooth","lineStyle","itemStyle","CompareChart","genderData","axisLabel","interval","rotate","textStyle","baseline","fontWeight","axisLine","show","axisTick","splitLine","stack","formatter","params","Number","barMaxWidth","death","Boro","categories","boroData","getOption","BarCharts","md","error_image_overlay","width","display","flexDirection","justifyContent","alignItems","error_image_container","backgroundImage","backgroundSize","backgroundPosition","error_image_text","ErrorBoundary","spinner","NycDashboard","setData","hasError","setHasError","useEffect","axios","url","method","then","res","tempData","summary","index","catch","error","undefined","console","log","Container","maxWidth","CssBaseline","CircularProgress","menuButton","Header","AppBar","Toolbar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5f8411d7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, Typography, Paper, Theme, createStyles, makeStyles } from \"@material-ui/core\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\ntype CardProps = {\n    title: string,\n    number: string,\n    rate?: string,\n    rateText?: string,\n    rateColor?: string,\n    upIcon?: boolean,\n    downIcon?: boolean\n}\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        root: {\n            padding: 10, \n            borderWidth: 2\n        }\n    })\n);\n\nconst CardComponent: React.FC<CardProps> = (props) => {\n    const classes = useStyles();\n\n    let icon = null;\n    if(props.upIcon) {\n        icon = (\n            <ArrowUpwardIcon />\n        )\n    } else if(props.downIcon) {\n        icon = (\n            <ArrowDownwardIcon />\n        )\n    }\n\n    return (\n        <Grid item xs={12} sm>\n            <Paper elevation={6} className={classes.root}>\n                <Typography variant=\"subtitle1\">\n                    {props.title}\n                </Typography>\n                <Grid container justify=\"space-between\">\n                    <Grid item>\n                        <Typography variant=\"h4\">\n                            {props.number}\n                        </Typography>\n                    </Grid>\n                    <Grid item>                        \n                        <Typography variant=\"body2\" style={{paddingTop: 17}}>\n                            <span style={{color: props.rateColor}}>{props.rate}</span>{props.rateText}\n                        </Typography>\n                        {icon}\n                    </Grid>\n                </Grid>\n\n            </Paper>\n        </Grid>\n    )\n}\n\nexport default CardComponent;","export class Constants {\n    static casesColor = \"#69b2f8\";\n    static hospColor = \"#fec85e\";\n    static deathsColor = \"#C12626\";\n    static pinkColor = \"#f77eb9\";\n    static greenColor = \"#41B3A3\";\n}\n\nexport const formatNum = (value: string | number) => {\n    let num = parseInt(value.toString());\n    let numArray = [];\n    while(num > 1000) {\n        numArray.push(num % 1000);\n        num = Math.floor(num / 1000);\n    }\n    numArray.push(num);\n\n    return numArray.reverse().join();\n}","import React from \"react\";\nimport CardComponent from \"../card-component\";\nimport { Grid } from \"@material-ui/core\";\nimport {Constants, formatNum} from \"../../constants\";\nimport { SummaryProps } from \"../../types/covid19\"; \n\nconst Summary: React.FC<SummaryProps> = (props) => {\n    const {cases, increase, hospitalized, deaths} = props.summaryData;\n    \n    const computeRate = (total: number, number: number):string => {\n        const percentage = (number / total) * 100;\n        return percentage.toFixed(1);\n    }\n\n    const hRate = computeRate(parseFloat(cases), parseFloat(hospitalized));\n    const dRate = computeRate(parseFloat(cases), parseFloat(deaths));\n\n    const increaseNum = parseInt(increase);\n    let increaseResult = \"0\";\n    if(increaseNum > 0) {\n        increaseResult = `+ ${formatNum(increaseNum)}`;\n    } else if(increaseNum < 0) {\n        increaseResult = `- ${formatNum(increaseNum)}`;\n    }\n    return(\n        <Grid container spacing={6}>\n            <CardComponent \n                title=\"TOTAL CASES\"\n                number={formatNum(cases)}\n                rate={increaseResult}\n                rateText={\" cases\"}\n                rateColor={parseInt(increase) > 0 ? Constants.pinkColor : Constants.greenColor}\n            />\n            <CardComponent \n                title=\"HOSPITALIZED\"\n                number={formatNum(hospitalized)}\n                rate={`${hRate}%`}\n                rateText={\" of total cases\"}\n                rateColor={Constants.hospColor}\n            />\n            <CardComponent \n                title=\"DECEASED\"\n                number={formatNum(deaths)}\n                rate={`${dRate}%`}\n                rateText={\" of total cases\"}\n                rateColor={Constants.deathsColor}\n            />\n        </Grid>\n    );\n}\n\nexport default Summary;","import React from \"react\";\nimport { Typography, Grid, Paper, makeStyles, Theme, createStyles, Chip } from \"@material-ui/core\";\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\n\ntype titleProps = {\n    name: string,\n    lastUpdated: string,\n    datasource: string,\n    link: string\n}\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        root: {\n            flexGrow: 1,\n            marginTop: theme.spacing(4),\n            marginBottom: theme.spacing(4)\n        },\n        title: {\n            marginTop: 20\n        },\n        date: {\n            padding: 10, \n            borderWidth: 2\n        },\n        icon: {\n            marginRight: 10\n        }\n    })\n);\n\nconst TitleComponent: React.FC<titleProps> = (props) => {\n    const classes = useStyles();\n    return(\n        <Grid container spacing={4} className={classes.root}>\n            <Grid item xs={12} sm={9} className={classes.title}>\n                <Typography variant=\"h5\">\n                    Dashboard of the COVID-19 Virus Outbreak in {props.name}\n                </Typography>\n                <Chip \n                    color=\"default\" \n                    icon={<ErrorOutlineIcon />} \n                    size=\"small\"\n                    label={`Data source: ${props.datasource}`}\n                    component=\"a\"\n                    href={props.link}\n                    clickable\n                />\n            </Grid>\n            <Grid item xs={12} sm={3}>\n                <Paper variant=\"outlined\" className={classes.date}>\n                    <Typography variant=\"subtitle1\">\n                        Last updated at:\n                    </Typography>\n                    <Typography variant=\"subtitle1\">\n                        <CalendarTodayIcon fontSize=\"small\" className={classes.icon} />                                \n                        {props.lastUpdated}\n                    </Typography>\n                </Paper>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default TitleComponent;","import React, { useState } from \"react\";\nimport { \n    TextField, \n    InputAdornment, \n    Paper, \n    TableRow, \n    Table, \n    TableHead, \n    TableCell, \n    TableBody, \n    Typography,\n    IconButton,\n    TablePagination,\n    TableContainer, \n    Grid} from \"@material-ui/core\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { TestingProps } from \"../types/covid19\";\n\ninterface toolbarProps {\n    title: string;\n    search: string;\n    onSearchChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    placeholder: string;\n    onClick: () => void;\n}\n\nconst EnhancedTableToolbar = (props: toolbarProps) => {\n\n    let cancelIcon: any = null;\n    if(props.search !== \"\") {\n        cancelIcon = (\n            <InputAdornment position=\"end\">\n                <IconButton onClick={props.onClick}>\n                    <CancelIcon color=\"disabled\" />\n                </IconButton>\n            </InputAdornment>\n        )   \n    }\n\n    return(\n        <Grid container>  \n            <Grid item xs={12} sm={7}>\n                <Typography variant=\"h6\" component=\"div\" style={{flex: '1 1 90%'}}>\n                    <strong>{props.title}</strong>\n                </Typography>\n            </Grid>\n            <Grid item xs={12} sm={5} component=\"div\" style={{textAlign: \"right\"}}>\n                <TextField \n                    value={props.search}\n                    onChange={props.onSearchChange}\n                    id=\"input-search\"\n                    placeholder={props.placeholder}\n                    InputProps={{\n                        startAdornment: (\n                            <InputAdornment position=\"start\">\n                                <SearchIcon />\n                            </InputAdornment>\n                        ),\n                        endAdornment: cancelIcon\n                    }}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n\nconst ZCTest: React.FC<TestingProps> = ({ testingData }) => {\n\n    const [search, setSearch] = useState(\"\");\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [results, setResults] = React.useState(testingData);\n\n    const onSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let search = e.target ? e.target.value : \"\";\n        let searchResults = testingData.filter(item => !search || item[0].indexOf(search) >= 0);\n        setSearch(search);\n        setResults(searchResults);\n        setPage(0);\n    }\n\n    const onDoneClicked = () => {\n        setSearch(\"\");\n        setResults(testingData);\n    }\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, results.length - page * rowsPerPage);\n\n    return(\n        <Paper variant=\"outlined\" style={{ marginTop: 10, padding: 30}}>\n            <EnhancedTableToolbar \n                title={\"Daily Tested Cases by Zip Code\"}\n                search={search}\n                onSearchChange={onSearchChange}\n                placeholder={\"Enter Zip Code\"}\n                onClick={onDoneClicked}\n            />\n            <TableContainer>\n                <Table style={{marginTop: 20}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell variant=\"head\" align=\"right\" style={{fontSize: 16}}><strong>Zip Code</strong></TableCell>\n                            <TableCell variant=\"head\" align=\"right\" style={{fontSize: 16}}><strong>Positive Cases</strong></TableCell>\n                            <TableCell variant=\"head\" align=\"right\" style={{fontSize: 16}}><strong>Tested Cases</strong></TableCell>\n                            <TableCell variant=\"head\" align=\"right\" style={{fontSize: 16}}><strong>Positive Rate</strong></TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {results\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map(item => {\n                                return(\n                                    <TableRow key={item[0]}>\n                                        <TableCell \n                                            component=\"th\" \n                                            scope=\"row\" \n                                            align=\"right\"\n                                            style={{fontSize: 17}}\n                                        >\n                                            {item[0]}\n                                        </TableCell>\n                                        <TableCell align=\"right\" style={{fontSize: 17}}>\n                                            {item[1]}\n                                        </TableCell>\n                                        <TableCell align=\"right\" style={{fontSize: 17}}>\n                                            {item[2]}\n                                        </TableCell>\n                                        <TableCell align=\"right\" style={{fontSize: 17}}>\n                                            {item[3]}%\n                                        </TableCell>\n                                    </TableRow>\n                                )\n                            })\n                        }\n                        {emptyRows > 0 && (\n                            <TableRow style={{ height: (57) * emptyRows }}>\n                                <TableCell colSpan={6} />\n                            </TableRow>\n                        )}\n                    </TableBody>    \n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={results.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </Paper>\n    )\n}\n\nexport default ZCTest;","import React from \"react\";\nimport ReactEcharts from \"echarts-for-react\";\nimport { Paper, Chip, makeStyles, Theme, createStyles } from \"@material-ui/core\";\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport {Constants} from \"../constants\";\nimport { TimeSeriesProps } from \"../types/covid19\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            marginTop: 50\n        },\n        chip_container: {\n            textAlign: \"end\"\n        },\n        chart: {\n            marginTop: 5, \n            padding: 20\n        }\n    })\n);\n\nconst TimeSeriesChart: React.FC<TimeSeriesProps> = (props) => {\n\n    let dates: string[] = [];\n    let cases: number[] = [];\n    let hosp: number[] = [];\n    let deaths: number[] = [];\n\n    props.dailyData.forEach(item => {\n        dates.push(item[0]);\n        cases.push(item[1] !== \"\" ? parseInt(item[1]) : 0);\n        hosp.push(item[2] !== \"\" ? parseInt(item[2]) : 0);\n        deaths.push(item[3] !== \"\" ? parseInt(item[3]) : 0);\n    })\n\n    const getOptions = () => ({\n        title: {\n            text: \"Daily Count\",\n            subtext: \"Number of increases everyday\"\n        },\n        tooltip: {\n            trigger: \"axis\"\n        },\n        legend: {\n            data: [\"Cases\", \"Hospitalized\", \"Deaths\"],\n            icon: \"roundRect\",\n            left: \"65%\"\n        },\n        grid: {\n            top: \"25%\",\n            left: \"3%\",\n            right: \"4%\",\n            bottom: \"3%\",\n            containLabel: true\n        },\n        xAxis: {\n            type: \"category\",\n            boundaryGap: false,\n            data: dates\n        },\n        yAxis: {\n            type: \"value\"\n        },\n        series: [\n            {\n                name: \"Cases\",\n                type: \"line\",\n                smooth: true,\n                lineStyle: {\n                    color: Constants.casesColor\n                },\n                itemStyle: {\n                    color: Constants.casesColor\n                },\n                data: cases\n            },\n            {\n                name: \"Hospitalized\",\n                type: \"line\",\n                smooth: true,\n                lineStyle: {\n                    color: Constants.hospColor\n                },\n                itemStyle: {\n                    color: Constants.hospColor\n                },\n                data: hosp\n            },\n            {\n                name: \"Deaths\",\n                type: \"line\",\n                smooth: true,\n                lineStyle: {\n                    color: Constants.deathsColor\n                },\n                itemStyle: {\n                    color: Constants.deathsColor\n                },\n                data: deaths\n            }\n        ]\n    });\n\n    const classes = useStyles();\n\n    return(        \n        <div className={classes.root}>\n            <div className={classes.chip_container}>\n                <Chip\n                    color=\"secondary\" \n                    variant=\"outlined\"\n                    icon={<ErrorOutlineIcon />} \n                    size=\"small\"\n                    label=\"Due to delays in reporting,\n                    recent data are incomplete.\"\n                />\n            </div>\n            <Paper variant=\"outlined\" className={classes.chart}>\n                <ReactEcharts \n                    option={getOptions()}\n                />\n            </Paper>\n        </div>\n    )\n}\n\nexport default TimeSeriesChart;","import React from \"react\";\nimport { makeStyles, Theme, createStyles, Paper } from \"@material-ui/core\";\nimport ReactEcharts from \"echarts-for-react\";\nimport {Constants} from \"../constants\";\nimport { FormatterParams, CompareChartProps } from \"../types/covid19\";\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        chart: {\n            padding: 20\n        }\n    })\n)\n\nconst CompareChart: React.FC<CompareChartProps> = ({ genderData }) => {\n\n    const getOption = () => ({\n        title: {\n            text: \"Rate by Gender\"\n        },\n        legend: {\n            data: [\"Female\", \"Male\"],\n            left: \"73%\"\n        },\n        grid: {\n            left: \"3%\",\n            right: \"4%\",\n            bottom: \"3%\",\n            containLabel: true\n        },\n        xAxis: {\n            type: \"value\"\n        },\n        yAxis: {\n            type: \"category\",\n            data: [\"Deaths\", \"Hospitalized\", \"Total\"],\n            axisLabel: {\n                interval: 0,\n                rotate: 90,\n                textStyle: {\n                  baseline: \"bottom\",\n                  color: \"#333\",\n                  fontSize: 11,\n                  fontWeight: \"bold\"\n                }\n            },\n            axisLine: { lineStyle: { color: \"#aaa\" }, show: true },\n            axisTick: { show: false },\n            splitLine: { show: false },\n        },\n        series: [\n            {\n                name: \"Female\",\n                type: \"bar\",\n                stack: \"total\",\n                label: {\n                    show: true,\n                    position: \"inside\",\n                    fontWeight: \"bold\",\n                    formatter: (params: FormatterParams): string => {\n                        const text =  -1 * Number(params.value);\n                        return `${text.toFixed(1)}%`;\n                    }\n                },\n                itemStyle: {\n                    color: Constants.pinkColor\n                },\n                barMaxWidth: \"45%\",\n                data: [\n                    -genderData.death[0],\n                    -genderData.hospitalized[0],\n                    -genderData.cases[0]\n                ]\n            },\n            {\n                name: \"Male\",\n                type: \"bar\",\n                stack: \"total\",\n                label: {\n                    show: true,\n                    position: \"inside\",\n                    fontWeight: \"bold\",\n                    formatter: (params: FormatterParams): string => {\n                        return `${Number(params.value).toFixed(1)}%`;\n                    }\n                },\n                itemStyle: {\n                    color: Constants.casesColor\n                },\n                data: [\n                    genderData.death[1],\n                    genderData.hospitalized[1],\n                    genderData.cases[1]\n                    \n                ]\n            }\n        ]\n    })\n\n    const classes = useStyles();\n    return(\n        <div>\n            <Paper variant=\"outlined\" className={classes.chart}>\n                <ReactEcharts \n                    option={getOption()}\n                />\n            </Paper>\n        </div>\n    )\n}\n\nexport default CompareChart;","import React from \"react\";\nimport { makeStyles, createStyles, Paper, Theme } from \"@material-ui/core\";\nimport ReactEcharts from \"echarts-for-react\";\nimport {Constants} from \"../constants\";\nimport { BoroProps } from \"../types/covid19\";\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        chart: {\n            padding: 20\n        }\n    })\n)\n\nconst Boro: React.FC<BoroProps> = (props) => {\n\n    const getOption = () => {\n        const categories: string[] = [];\n        const cases: number[] = [];\n    \n        props.boroData.forEach(item => {\n            categories.push(item[0]);\n            cases.push(parseInt(item[1]));\n        });\n    \n        return {\n            title: {\n                text: \"Borough Cases\",\n                subtext: \"Total cases of each borough\"\n            },\n            grid: {\n                left: \"3%\",\n                right: \"4%\",\n                bottom: \"3%\",\n                containLabel: true\n            },\n            xAxis: {\n                type: \"category\",\n                data: categories,\n                axisLabel: {\n                    interval: 0,\n                    textStyle: {\n                      baseline: \"top\",\n                      color: \"#333\",\n                      fontSize: 11,\n                      fontWeight: \"bold\"\n                    }\n                },\n                axisLine: { lineStyle: { color: \"#aaa\" }, show: true },\n                axisTick: { show: false },\n                splitLine: { show: false },\n            },\n            yAxis: {\n                type: \"value\"\n            },\n            series: [\n                {\n                    name: \"Count\",\n                    type: \"bar\",\n                    label: {\n                        show: true,\n                        position: \"top\",\n                        fontWeight: \"bold\",\n                        color: \"black\"\n                    },\n                    itemStyle: {\n                        color: Constants.casesColor\n                    },\n                    barMaxWidth: \"45%\",\n                    data: cases\n                }\n            ]\n        }\n    }\n\n    const classes = useStyles();\n    return(\n        <div>\n            <Paper variant=\"outlined\" className={classes.chart}>\n                <ReactEcharts \n                    option={getOption()}\n                />\n            </Paper>\n        </div>\n    )\n}\n\nexport default Boro;","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport CompareChart from \"./compare-chart\";\nimport Boro from \"./boro-component\";\nimport { BarChartProps } from \"../types/covid19\";\n\nconst BarCharts: React.FC<BarChartProps> = (props) => {\n    return(\n        <Grid container spacing={1} style={{marginTop: 3}}>\n            <Grid item xs={12} sm={12} md={5}>                        \n                <CompareChart genderData={props.genderData}/>\n            </Grid>\n            <Grid item xs={12} sm={12} md={7}>\n                <Boro boroData={props.boroData} />\n            </Grid>\n        </Grid>  \n    )\n}\n\nexport default BarCharts;","import React from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        error_image_overlay: {\n            height: \"60vh\",\n            width: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        },\n        error_image_container: {\n            display: \"inline-block\",\n            backgroundImage: `url(\"https://i.imgur.com/yW2W9SC.png\")`,\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n            width: \"40vh\",\n            height: \"40vh\"\n        },\n        error_image_text: {\n            fontSize: \"28px\",\n            color: \"#2f8e89\"\n        }\n    })\n);\n\nconst ErrorBoundary: React.FC = () => {\n    const classes = useStyles();\n    return(\n        <div className={classes.error_image_overlay}>\n            <div className={classes.error_image_container}></div>\n            <h2 className={classes.error_image_text}>Sorry, this page is broken</h2>\n        </div>\n    );\n}\n\nexport default ErrorBoundary;","import React, { useState, useEffect } from \"react\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Summary from \"../summary/summary-component\";\nimport TitleComponent from \"../title-component\";\nimport ZCTest from \"../test-component\";\nimport TimeSeriesChart from \"../time-series-chart\";\nimport BarCharts from \"../bar-chart-component\";\nimport axios from \"axios\";\nimport { AppData } from \"../../types/covid19\";\nimport ErrorBoundary from \"../errro-boundary/error-boundary\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        spinner: {\n            height: \"60vh\",\n            width: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    })\n);\n\nconst NycDashboard: React.FC = () => {\n    const classes = useStyles();\n    const [data, setData] = useState<AppData | undefined>();\n    const [hasError, setHasError] = useState(false);\n    \n    useEffect(() => {\n        axios({\n            url: \"data\",\n            method: \"GET\"\n        }).then(res => {\n\n            const tempData = res.data;\n            const summary = tempData.summary;\n            const genderData = tempData.genderData;\n            const boroData = tempData.boroData.value\n                .map((item: string[], index: number) => {\n                    return item[index];\n                });\n            const dailyData = tempData.dailyData.value\n                .map((item: string[], index: number) => {\n                    return item[index];\n                });\n            const testingData = tempData.testingData.value\n                .map((item: string[], index: number) => {\n                    return item[index];\n                });\n\n            setData({\n                summary,\n                genderData,\n                boroData,\n                dailyData,\n                testingData\n            });\n            setHasError(false);\n        }).catch(error => {\n            setData(undefined);\n            setHasError(true);\n            console.log(error);\n        }) \n    }, []);   \n\n    if(hasError) {\n        return(\n            <ErrorBoundary />\n        )\n    };\n\n    if(data) {\n        const summaryData = data.summary;\n        const dailyData = data.dailyData;\n        const genderData = data.genderData;\n        const boroData = data.boroData;\n        const testingData = data.testingData;\n\n        return(\n            <div>\n                <Container maxWidth=\"md\">\n                    <CssBaseline />\n                    <TitleComponent \n                        name={\"NYC\"} \n                        lastUpdated={summaryData.lastUpdated} \n                        datasource={\"NYC DOH\"}\n                        link={\"https://github.com/nychealth/coronavirus-data\"}\n                    />\n                    <Summary summaryData={summaryData} />\n                    <TimeSeriesChart dailyData={dailyData} />\n                    <BarCharts \n                        genderData={genderData} \n                        boroData={boroData}\n                    />\n                    <ZCTest testingData={testingData} />\n                </Container>\n            </div>\n    \n        )\n    } else {\n        return(\n            <Container maxWidth=\"md\">\n                <div className={classes.spinner}>\n                    <CircularProgress  />\n                </div>                \n            </Container>\n        )\n    }\n}\n\nexport default NycDashboard;","import React from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        menuButton: {\n            marginRight: theme.spacing(2)\n        },\n        title: {\n            flexGrow: 1\n        }\n    })\n);\n\nconst Header: React.FC = () => {\n    const classes = useStyles();\n\n    return(\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h5\" className={classes.title}>\n                        covid19 <strong>NYC</strong>\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport NycDashboard from './components/nyc/nyc-component';\nimport Header from './components/header-component';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <NycDashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}