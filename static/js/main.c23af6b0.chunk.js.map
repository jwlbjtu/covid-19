{"version":3,"sources":["components/card-component.tsx","constants.tsx","components/summary/summary-component.tsx","components/title-component.tsx","components/test-component.tsx","components/time-series-chart.tsx","components/compare-chart.tsx","components/boro-component.tsx","components/bar-chart-component.tsx","components/nyc/nyc-component.tsx","components/header-component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","padding","borderWidth","CardComponent","props","classes","icon","upIcon","downIcon","Grid","item","xs","sm","Paper","elevation","className","Typography","variant","title","container","justify","number","style","paddingTop","color","rateColor","rate","rateText","Constants","casesColor","hospColor","deathsColor","pinkColor","greenColor","Summary","summaryData","cases","increase","hospitalized","deaths","computeRate","total","toFixed","hRate","parseFloat","dRate","increaseNum","parseInt","increaseResult","spacing","flexGrow","marginTop","marginBottom","date","marginRight","TitleComponent","name","Chip","size","label","datasource","component","href","link","clickable","fontSize","lastUpdated","EnhancedTableToolbar","cancelIcon","search","InputAdornment","position","IconButton","onClick","flex","textAlign","TextField","value","onChange","onSearchChange","id","placeholder","InputProps","startAdornment","endAdornment","ZCTest","useState","setSearch","page","setPage","React","rowsPerPage","setRowsPerPage","zcTestData","results","setResults","emptyRows","Math","min","length","e","target","searchResults","filter","indexOf","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","slice","map","key","scope","height","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","dates","hosp","dailyData","forEach","push","chip_container","chart","TimeSeriesChart","option","text","subtext","tooltip","trigger","legend","data","left","grid","top","right","bottom","containLabel","xAxis","type","boundaryGap","yAxis","series","smooth","lineStyle","itemStyle","CompareChart","axisLabel","interval","rotate","textStyle","baseline","fontWeight","axisLine","show","axisTick","splitLine","stack","formatter","params","Number","barMaxWidth","genderData","death","getOption","categories","boroData","Boro","BarCharts","md","NycDashboard","Container","maxWidth","CssBaseline","menuButton","Header","AppBar","Toolbar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c23af6b0.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, Typography, Paper, Theme, createStyles, makeStyles } from \"@material-ui/core\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\ntype CardProps = {\n    title: string,\n    number: string,\n    rate?: string,\n    rateText?: string,\n    rateColor?: string,\n    upIcon?: boolean,\n    downIcon?: boolean\n}\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        root: {\n            padding: 10, \n            borderWidth: 2\n        }\n    })\n);\n\nconst CardComponent: React.FC<CardProps> = (props) => {\n    const classes = useStyles();\n\n    let icon = null;\n    if(props.upIcon) {\n        icon = (\n            <ArrowUpwardIcon />\n        )\n    } else if(props.downIcon) {\n        icon = (\n            <ArrowDownwardIcon />\n        )\n    }\n\n    return (\n        <Grid item xs={12} sm>\n            <Paper elevation={6} className={classes.root}>\n                <Typography variant=\"subtitle1\">\n                    {props.title}\n                </Typography>\n                <Grid container justify=\"space-between\">\n                    <Grid item>\n                        <Typography variant=\"h4\">\n                            {props.number}\n                        </Typography>\n                    </Grid>\n                    <Grid item>                        \n                        <Typography variant=\"body2\" style={{paddingTop: 17}}>\n                            <span style={{color: props.rateColor}}>{props.rate}</span>{props.rateText}\n                        </Typography>\n                        {icon}\n                    </Grid>\n                </Grid>\n\n            </Paper>\n        </Grid>\n    )\n}\n\nexport default CardComponent;","export class Constants {\n    static casesColor = \"#69b2f8\";\n    static hospColor = \"#fec85e\";\n    static deathsColor = \"#C12626\";\n    static pinkColor = \"#f77eb9\";\n    static greenColor = \"#41B3A3\";\n}","import React from \"react\";\nimport CardComponent from \"../card-component\";\nimport { Grid } from \"@material-ui/core\";\nimport {Constants} from \"../../constants\";\n\ntype summaryProps = {\n    summaryData: {\n        cases: string,\n        increase: string,\n        hospitalized: string,\n        deaths: string\n    }\n}\n\nconst Summary: React.FC<summaryProps> = (props) => {\n    const {cases, increase, hospitalized, deaths} = props.summaryData;\n\n    const computeRate = (total: number, number: number):string => {\n        const percentage = (number / total) * 100;\n        return percentage.toFixed(1);\n    }\n\n    const hRate = computeRate(parseFloat(cases), parseFloat(hospitalized));\n    const dRate = computeRate(parseFloat(cases), parseFloat(deaths));\n\n    const increaseNum = parseInt(increase);\n    let increaseResult = \"0\";\n    if(increaseNum > 0) {\n        increaseResult = `+ ${increaseNum}`;\n    } else if(increaseNum < 0) {\n        increaseResult = `- ${increaseNum}`;\n    }\n\n    return(\n        <Grid container spacing={6}>\n            <CardComponent \n                title=\"TOTAL CASES\"\n                number={cases}\n                rate={increaseResult}\n                rateText={\" cases\"}\n                rateColor={parseInt(increase) > 0 ? Constants.pinkColor : Constants.greenColor}\n            />\n            <CardComponent \n                title=\"HOSPITALIZED\"\n                number={hospitalized}\n                rate={`${hRate}%`}\n                rateText={\" of total cases\"}\n                rateColor={Constants.hospColor}\n            />\n            <CardComponent \n                title=\"DECEASED\"\n                number={deaths}\n                rate={`${dRate}%`}\n                rateText={\" of total cases\"}\n                rateColor={Constants.deathsColor}\n            />\n        </Grid>\n    );\n}\n\nexport default Summary;","import React from \"react\";\nimport { Typography, Grid, Paper, makeStyles, Theme, createStyles, Chip } from \"@material-ui/core\";\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\n\ntype titleProps = {\n    name: string,\n    lastUpdated: string,\n    datasource: string,\n    link: string\n}\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        root: {\n            flexGrow: 1,\n            marginTop: theme.spacing(4),\n            marginBottom: theme.spacing(4)\n        },\n        title: {\n            marginTop: 20\n        },\n        date: {\n            padding: 10, \n            borderWidth: 2\n        },\n        icon: {\n            marginRight: 10\n        }\n    })\n);\n\nconst TitleComponent: React.FC<titleProps> = (props) => {\n    const classes = useStyles();\n    return(\n        <Grid container spacing={4} className={classes.root}>\n            <Grid item xs={12} sm={9} className={classes.title}>\n                <Typography variant=\"h5\">\n                    Dashboard of the COVID-19 Virus Outbreak in {props.name}\n                </Typography>\n                <Chip \n                    color=\"default\" \n                    icon={<ErrorOutlineIcon />} \n                    size=\"small\"\n                    label={`Data source: ${props.datasource}`}\n                    component=\"a\"\n                    href={props.link}\n                    clickable\n                />\n            </Grid>\n            <Grid item xs={12} sm={3}>\n                <Paper variant=\"outlined\" className={classes.date}>\n                    <Typography variant=\"subtitle1\">\n                        Last updated at:\n                    </Typography>\n                    <Typography variant=\"subtitle1\">\n                        <CalendarTodayIcon fontSize=\"small\" className={classes.icon} />                                \n                        {props.lastUpdated}\n                    </Typography>\n                </Paper>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default TitleComponent;","import React, { useState } from \"react\";\nimport { \n    TextField, \n    InputAdornment, \n    Paper, \n    TableRow, \n    Table, \n    TableHead, \n    TableCell, \n    TableBody, \n    Typography,\n    IconButton,\n    TablePagination,\n    TableContainer, \n    Grid} from \"@material-ui/core\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport zcTestData from \"../data/nyc/zcTest.json\";\n\ninterface toolbarProps {\n    title: string;\n    search: string;\n    onSearchChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    placeholder: string;\n    onClick: () => void;\n}\n\nconst EnhancedTableToolbar = (props: toolbarProps) => {\n\n    let cancelIcon: any = null;\n    if(props.search !== \"\") {\n        cancelIcon = (\n            <InputAdornment position=\"end\">\n                <IconButton onClick={props.onClick}>\n                    <CancelIcon color=\"disabled\" />\n                </IconButton>\n            </InputAdornment>\n        )   \n    }\n\n    return(\n        <Grid container>  \n            <Grid item xs={12} sm={7}>\n                <Typography variant=\"h6\" component=\"div\" style={{flex: '1 1 90%'}}>\n                    <strong>{props.title}</strong>\n                </Typography>\n            </Grid>\n            <Grid item xs={12} sm={5} component=\"div\" style={{textAlign: \"right\"}}>\n                <TextField \n                    value={props.search}\n                    onChange={props.onSearchChange}\n                    id=\"input-search\"\n                    placeholder={props.placeholder}\n                    InputProps={{\n                        startAdornment: (\n                            <InputAdornment position=\"start\">\n                                <SearchIcon />\n                            </InputAdornment>\n                        ),\n                        endAdornment: cancelIcon\n                    }}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n\nconst ZCTest = () => {\n\n    const [search, setSearch] = useState(\"\");\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [results, setResults] = React.useState(zcTestData);\n\n    const onSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let search = e.target ? e.target.value : \"\";\n        let searchResults = zcTestData.filter(item => !search || item[0].indexOf(search) >= 0);\n        setSearch(search);\n        setResults(searchResults);\n        setPage(0);\n    }\n\n    const onDoneClicked = () => {\n        setSearch(\"\");\n        setResults(zcTestData);\n    }\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, results.length - page * rowsPerPage);\n\n    return(\n        <Paper variant=\"outlined\" style={{ marginTop: 10, padding: 30}}>\n            <EnhancedTableToolbar \n                title={\"Daily Tested Cases by Zip Code\"}\n                search={search}\n                onSearchChange={onSearchChange}\n                placeholder={\"Enter Zip Code\"}\n                onClick={onDoneClicked}\n            />\n            <TableContainer>\n                <Table style={{marginTop: 20}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell variant=\"head\" align=\"right\" style={{fontSize: 16}}><strong>Zip Code</strong></TableCell>\n                            <TableCell variant=\"head\" align=\"right\" style={{fontSize: 16}}><strong>Positive Cases</strong></TableCell>\n                            <TableCell variant=\"head\" align=\"right\" style={{fontSize: 16}}><strong>Tested Cases</strong></TableCell>\n                            <TableCell variant=\"head\" align=\"right\" style={{fontSize: 16}}><strong>Positive Rate</strong></TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {results\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map(item => {\n                                return(\n                                    <TableRow key={item[0]}>\n                                        <TableCell \n                                            component=\"th\" \n                                            scope=\"row\" \n                                            align=\"right\"\n                                            style={{fontSize: 17}}\n                                        >\n                                            {item[0]}\n                                        </TableCell>\n                                        <TableCell align=\"right\" style={{fontSize: 17}}>\n                                            {item[1]}\n                                        </TableCell>\n                                        <TableCell align=\"right\" style={{fontSize: 17}}>\n                                            {item[2]}\n                                        </TableCell>\n                                        <TableCell align=\"right\" style={{fontSize: 17}}>\n                                            {item[3]}%\n                                        </TableCell>\n                                    </TableRow>\n                                )\n                            })\n                        }\n                        {emptyRows > 0 && (\n                            <TableRow style={{ height: (57) * emptyRows }}>\n                                <TableCell colSpan={6} />\n                            </TableRow>\n                        )}\n                    </TableBody>    \n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={results.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </Paper>\n    )\n}\n\nexport default ZCTest;","import React from \"react\";\nimport ReactEcharts from \"echarts-for-react\";\nimport dailyData from \"../data/nyc/nyc-daily.json\";\nimport { Paper, Chip, makeStyles, Theme, createStyles } from \"@material-ui/core\";\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport {Constants} from \"../constants\";\n\nlet dates: string[] = [];\nlet cases: number[] = [];\nlet hosp: number[] = [];\nlet deaths: number[] = [];\n\ndailyData.forEach(item => {\n    dates.push(item[0]);\n    cases.push(item[1] !== \"\" ? parseInt(item[1]) : 0);\n    hosp.push(item[2] !== \"\" ? parseInt(item[2]) : 0);\n    deaths.push(item[3] !== \"\" ? parseInt(item[3]) : 0);\n})\n\nconst getOptions = () => ({\n    title: {\n        text: \"Daily Count\",\n        subtext: \"Number of increases everyday\"\n    },\n    tooltip: {\n        trigger: \"axis\"\n    },\n    legend: {\n        data: [\"Cases\", \"Hospitalized\", \"Deaths\"],\n        icon: \"roundRect\",\n        left: \"65%\"\n    },\n    grid: {\n        top: \"25%\",\n        left: \"3%\",\n        right: \"4%\",\n        bottom: \"3%\",\n        containLabel: true\n    },\n    xAxis: {\n        type: \"category\",\n        boundaryGap: false,\n        data: dates\n    },\n    yAxis: {\n        type: \"value\"\n    },\n    series: [\n        {\n            name: \"Cases\",\n            type: \"line\",\n            smooth: true,\n            lineStyle: {\n                color: Constants.casesColor\n            },\n            itemStyle: {\n                color: Constants.casesColor\n            },\n            data: cases\n        },\n        {\n            name: \"Hospitalized\",\n            type: \"line\",\n            smooth: true,\n            lineStyle: {\n                color: Constants.hospColor\n            },\n            itemStyle: {\n                color: Constants.hospColor\n            },\n            data: hosp\n        },\n        {\n            name: \"Deaths\",\n            type: \"line\",\n            smooth: true,\n            lineStyle: {\n                color: Constants.deathsColor\n            },\n            itemStyle: {\n                color: Constants.deathsColor\n            },\n            data: deaths\n        }\n    ]\n});\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            marginTop: 50\n        },\n        chip_container: {\n            textAlign: \"end\"\n        },\n        chart: {\n            marginTop: 5, \n            padding: 20\n        }\n    })\n);\n\nconst TimeSeriesChart = () => {\n    const classes = useStyles();\n\n    return(        \n        <div className={classes.root}>\n            <div className={classes.chip_container}>\n                <Chip\n                    color=\"secondary\" \n                    variant=\"outlined\"\n                    icon={<ErrorOutlineIcon />} \n                    size=\"small\"\n                    label=\"Due to delays in reporting,\n                    recent data are incomplete.\"\n                />\n            </div>\n            <Paper variant=\"outlined\" className={classes.chart}>\n                <ReactEcharts \n                    option={getOptions()}\n                />\n            </Paper>\n        </div>\n    )\n}\n\nexport default TimeSeriesChart;","import React from \"react\";\nimport { makeStyles, Theme, createStyles, Paper } from \"@material-ui/core\";\nimport genderData from \"../data/nyc/gender.json\";\nimport ReactEcharts from \"echarts-for-react\";\nimport {Constants} from \"../constants\";\nimport { FormatterParams } from \"../types/covid19\";\n\nconst getOption = () => ({\n    title: {\n        text: \"Rate by Gender\"\n    },\n    legend: {\n        data: [\"Female\", \"Male\"],\n        left: \"73%\"\n    },\n    grid: {\n        left: \"3%\",\n        right: \"4%\",\n        bottom: \"3%\",\n        containLabel: true\n    },\n    xAxis: {\n        type: \"value\"\n    },\n    yAxis: {\n        type: \"category\",\n        data: [\"Deaths\", \"Hospitalized\", \"Total\"],\n        axisLabel: {\n            interval: 0,\n            rotate: 90,\n            textStyle: {\n              baseline: \"bottom\",\n              color: \"#333\",\n              fontSize: 11,\n              fontWeight: \"bold\"\n            }\n        },\n        axisLine: { lineStyle: { color: \"#aaa\" }, show: true },\n        axisTick: { show: false },\n        splitLine: { show: false },\n    },\n    series: [\n        {\n            name: \"Female\",\n            type: \"bar\",\n            stack: \"total\",\n            label: {\n                show: true,\n                position: \"inside\",\n                fontWeight: \"bold\",\n                formatter: (params: FormatterParams): string => {\n                    const text =  -1 * Number(params.value);\n                    return `${text.toFixed(1)}%`;\n                }\n            },\n            itemStyle: {\n                color: Constants.pinkColor\n            },\n            barMaxWidth: \"45%\",\n            data: [\n                -genderData.death[0],\n                -genderData.hospitalized[0],\n                -genderData.cases[0]\n            ]\n        },\n        {\n            name: \"Male\",\n            type: \"bar\",\n            stack: \"total\",\n            label: {\n                show: true,\n                position: \"inside\",\n                fontWeight: \"bold\",\n                formatter: (params: FormatterParams): string => {\n                    return `${Number(params.value).toFixed(1)}%`;\n                }\n            },\n            itemStyle: {\n                color: Constants.casesColor\n            },\n            data: [\n                genderData.death[1],\n                genderData.hospitalized[1],\n                genderData.cases[1]\n                \n            ]\n        }\n    ]\n})\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        chart: {\n            padding: 20\n        }\n    })\n)\n\nconst CompareChart = () => {\n    const classes = useStyles();\n    return(\n        <div>\n            <Paper variant=\"outlined\" className={classes.chart}>\n                <ReactEcharts \n                    option={getOption()}\n                />\n            </Paper>\n        </div>\n    )\n}\n\nexport default CompareChart;","import React from \"react\";\nimport { makeStyles, createStyles, Paper, Theme } from \"@material-ui/core\";\nimport ReactEcharts from \"echarts-for-react\";\nimport {Constants} from \"../constants\";\nimport boroData from \"../data/nyc/boro.json\";\n\nconst getOption = () => {\n    const categories: string[] = [];\n    const cases: number[] = [];\n\n    boroData.forEach(item => {\n        categories.push(item[0]);\n        cases.push(parseInt(item[1]));\n    });\n\n    return {\n        title: {\n            text: \"Borough Cases\",\n            subtext: \"Total cases of each borough\"\n        },\n        grid: {\n            left: \"3%\",\n            right: \"4%\",\n            bottom: \"3%\",\n            containLabel: true\n        },\n        xAxis: {\n            type: \"category\",\n            data: categories,\n            axisLabel: {\n                interval: 0,\n                textStyle: {\n                  baseline: \"top\",\n                  color: \"#333\",\n                  fontSize: 11,\n                  fontWeight: \"bold\"\n                }\n            },\n            axisLine: { lineStyle: { color: \"#aaa\" }, show: true },\n            axisTick: { show: false },\n            splitLine: { show: false },\n        },\n        yAxis: {\n            type: \"value\"\n        },\n        series: [\n            {\n                name: \"Count\",\n                type: \"bar\",\n                label: {\n                    show: true,\n                    position: \"top\",\n                    fontWeight: \"bold\",\n                    color: \"black\"\n                },\n                itemStyle: {\n                    color: Constants.casesColor\n                },\n                barMaxWidth: \"45%\",\n                data: cases\n            }\n        ]\n    }\n}\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        chart: {\n            padding: 20\n        }\n    })\n)\n\nconst Boro = () => {\n    const classes = useStyles();\n    return(\n        <div>\n            <Paper variant=\"outlined\" className={classes.chart}>\n                <ReactEcharts \n                    option={getOption()}\n                />\n            </Paper>\n        </div>\n    )\n}\n\nexport default Boro;","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport CompareChart from \"./compare-chart\";\nimport Boro from \"./boro-component\";\n\nconst BarCharts = () => {\n    return(\n        <Grid container spacing={1} style={{marginTop: 3}}>\n            <Grid item xs={12} sm={12} md={5}>                        \n                <CompareChart />\n            </Grid>\n            <Grid item xs={12} sm={12} md={7}>\n                <Boro />\n            </Grid>\n        </Grid>  \n    )\n}\n\nexport default BarCharts;","import React from \"react\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Summary from \"../summary/summary-component\";\nimport TitleComponent from \"../title-component\";\nimport summaryData from \"../../data/nyc/summary.json\";\nimport ZCTest from \"../test-component\";\nimport TimeSeriesChart from \"../time-series-chart\";\nimport BarCharts from \"../bar-chart-component\";\n\nconst NycDashboard: React.FC = () => {\n    return(\n        <div>\n            <Container maxWidth=\"md\">\n                <CssBaseline />\n                <TitleComponent \n                    name={\"NYC\"} \n                    lastUpdated={summaryData.lastUpdated} \n                    datasource={\"NYC DOH\"}\n                    link={\"https://github.com/nychealth/coronavirus-data\"}\n                />\n                <Summary summaryData={summaryData} />\n                <TimeSeriesChart />\n                <BarCharts />\n                <ZCTest />\n            </Container>\n        </div>\n\n    )\n}\n\nexport default NycDashboard;","import React from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        menuButton: {\n            marginRight: theme.spacing(2)\n        },\n        title: {\n            flexGrow: 1\n        }\n    })\n);\n\nconst Header: React.FC = () => {\n    const classes = useStyles();\n\n    return(\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h5\" className={classes.title}>\n                        covid19 <strong>NYC</strong>\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport NycDashboard from './components/nyc/nyc-component';\nimport Header from './components/header-component';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <NycDashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}